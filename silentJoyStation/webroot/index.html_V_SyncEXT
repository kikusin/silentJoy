<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>SilentJoyStation</title>
  <style>
  @font-face {
    font-family: 'League Spartan';
    src: url('fonts/LeagueSpartan-Bold.woff2') format('woff2');
    font-weight: 700;
    font-style: normal;
  }


    html, body {
      margin: 0;
      padding: 0;
      background: #111;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      overflow: visible;
      font-family: 'League Spartan', sans-serif;
    }

#title {
  position: absolute;
  top: 10vh;
  width: 100%;
  text-align: center;
  font-size: 120px;
  color: white;
  font-weight: 700;
  z-index: 3;
  text-shadow:
    2px 2px 0px rgba(255,255,255,1),
    4px 4px 0px rgba(227,73,39,0.8),
    6px 6px 0px rgba(227,73,39,0.6),
    8px 8px 0px rgba(227,73,39,0.4),
    10px 10px 0px rgba(227,73,39,0.2),
    12px 12px 0px rgba(227,73,39,0.05);
  transform-origin: center;
}

  @keyframes glowShadows {
  0% {
    text-shadow:
          2px 2px 0px rgba(255,255,255,1),
          4px 4px 0px rgba(227,73,39,0.8),
          6px 6px 0px rgba(227,73,39,0.7),
          8px 8px 0px rgba(227,73,39,0.6),
          10px 10px 0px rgba(227,73,39,0.4),
          12px 12px 0px rgba(227,73,39,0.2);
  }
  20% {
    text-shadow:
          2px 2px 0px rgba(255,255,255,1),
          8px 8px 0px rgba(227,73,39,1),
          10px 10px 0px rgba(227,73,39,0.7),
          12px 12x 0px rgba(227,73,39,0.6),
          14px 14px 0px rgba(227,73,39,0.4),
          16px 16px 0px rgba(227,73,39,0.2);
  }
  40% {
    text-shadow:
          2px 2px 0px rgba(255,255,255,1),
          8px 8px 0px rgba(227,73,39,0.8),
          12px 12px 0px rgba(255,255,255,1),
          14px 14px 0px rgba(227,73,39,0.6),
          16px 16px 0px rgba(227,73,39,0.4),
          18px 18px 0px rgba(227,73,39,0.2);
  }
  60% {
    text-shadow:
          2px 2px 0px rgba(255,255,255,1),
          8px 8px 0px rgba(227,73,39,0.8),
          12px 12px 0px rgba(227,73,39,0.7),
          16px 16px 0px rgba(255,255,255,1),
          18px 18px 0px rgba(227,73,39,0.4),
          20px 20px 0px rgba(227,73,39,0.2);
  }
  80% {
    text-shadow:
          2px 2px 0px rgba(255,255,255,1),
          8px 8px 0px rgba(227,73,39,0.8),
          12px 12px 0px rgba(227,73,39,0.7),
          16px 16px 0px rgba(227,73,39,0.6),
          20px 20px 0px rgba(255,255,255,1),
          22px 22px 0px rgba(227,73,39,0.2);
  }
  100% {
    text-shadow:
          2px 2px 0px rgba(255,255,255,1),
          8px 8px 0px rgba(227,73,39,0.8),
          12px 12px 0px rgba(227,73,39,0.7),
          16px 16px 0px rgba(227,73,39,0.6),
          20px 20px 0px rgba(227,73,39,0.4),
          24px 24px 0px rgba(227,73,39,1);
  }
  }
  
  #title.glow {
    animation: glowShadows 1s ease-out;
  }


#startImage {
  position: absolute; /* ← esto es clave */
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 500px;
  height: 500px;
  cursor: pointer;
  z-index: 10;
  transition: width 0.6s ease, height 0.6s ease;
}

#startImage.shrink {
  width: 300px !important;
  height: 300px !important;
}

@keyframes rotarImagen {
  from { transform: translate(-50%, -50%) rotate(0deg); }
  to { transform: translate(-50%, -50%) rotate(360deg); }
}


.imagen-rotatoria {
  animation: rotarImagen 1.2s ease-out forwards;
}





 /*   #startImage {
      position: relative;
      top: 50%;
      left: 50%;
      cursor: pointer;
      z-index: 10;
      transition: width 0.6s ease, height 0.6s ease;
      transform: translate(-50%, -50%);
    }*/

    @keyframes jump {
      0% { transform: translateY(0); }
      30% { transform: translateY(-10px); }
      60% { transform: translateY(2px); }
      100% { transform: translateY(0); }
    }

    .avatar.jump {
      animation: jump 0.4s ease-out;
    }

    .avatar.flash svg circle {
      stroke: #ffcc00 !important;
      stroke-width: 4;
      transition: stroke 0.2s;
    }

    .avatar {
      position: absolute;
      width: 30px;
      height: 30px;
      transition: top 0.5s ease, left 0.5s ease;
    }


#waveContainer {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  z-index: 5;
  pointer-events: none;
}

    .wave {
      position: absolute;
      top: 50%;
      left: 50%;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      transform: translate(-50%, -50%);
      background-color: white;
      opacity: 0.9;
      z-index: 5;
      pointer-events: none;
      animation: ripple 1.5s ease-out forwards;
    }

    @keyframes ripple {
      0% {
        transform: translate(-50%, -50%) scale(1);
        opacity: 0.7;
      }
      100% {
        transform: translate(-50%, -50%) scale(45);
        opacity: 0.0;
      }
    }

    audio {
      display: none;
    }

    #audienceLayer {
      position: absolute;
      top: 0; left: 0;
      width: 100%; height: 100%;
      pointer-events: none;
      z-index: 2;
    }

    .avatar svg {
      width: 200%;
      height: 200%;
    }
  </style>
</head>
<body>
  <div id="waveContainer"></div>
  <div id="audienceLayer"></div>
  <div id="title">SILENT JOY</div>
  <img id="startImage" src="silentJoy.png" alt="Iniciar emisión">
    <audio id="player" controls></audio>
  <script src="js/hls.min.js"></script>
  <script>
    const startImage = document.getElementById("startImage");
    const audio = document.getElementById("player");
    const wrapper = document.getElementById("buttonWrapper");
    const audienceLayer = document.getElementById("audienceLayer");
    const clientId = localStorage.getItem("clientId") || `cliente_${Math.floor(Math.random() * 10000)}`;
    localStorage.setItem("clientId", clientId);

    let playing = false;

    function createWave(color) {
      const wave = document.createElement("div");
      wave.className = "wave";
      wave.style.backgroundColor = color;
      const container = document.getElementById("waveContainer");
      container.appendChild(wave);
      wave.addEventListener("animationend", () => wave.remove());
    }

    function reportSegment(segmentIndex) {
      const color = [ 5].includes(segmentIndex % 10) ? "#ffcc00" : "#ffffff";
      createWave(color);
      fetch("http://192.168.88.252:5050/sync", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id: clientId, segment: segmentIndex })
      }).catch(err => console.warn("No se pudo reportar el segmento:", err));

	if ([ 5].includes(segmentIndex % 10)) {
	  const title = document.getElementById("title");
	  title.classList.add("glow");
	  setTimeout(() => title.classList.remove("glow"), 2000);
	  const burro = document.getElementById("startImage");
          burro.classList.add("imagen-rotatoria");
          setTimeout(() => burro.classList.remove("imagen-rotatoria"), 2000);

	}

    }

function setupHLS(delayMs = 0) {
  if (Hls.isSupported()) {
    const hls = new Hls();
    hls.loadSource("hls/stream.m3u8");
    hls.attachMedia(audio);

    hls.on(Hls.Events.MANIFEST_PARSED, () => {
      if (delayMs > 0) {
        setTimeout(() => audio.play(), delayMs);
      } else {
        audio.play();
      }
    });

    hls.on(Hls.Events.FRAG_CHANGED, (event, data) => {
      const segmentName = data.frag.relurl;
      const match = segmentName.match(/stream(\d+)\.ts/);
      if (match) {
        const segmentIndex = parseInt(match[1], 10);
        reportSegment(segmentIndex); // <== ¡esto es lo que lanza el pulso!
      }
    });
  } else {
    audio.src = 'hls/stream.m3u8';
    if (delayMs > 0) {
      setTimeout(() => audio.play(), delayMs);
    } else {
      audio.addEventListener('canplay', () => {
        audio.play();
      });
    }
  }
}
    function drawAvatar(userId) {
      if (document.getElementById("avatar-" + userId)) return;
      const div = document.createElement("div");
      div.className = "avatar";
      div.id = "avatar-" + userId;
      div.style.left = Math.random() * (window.innerWidth - 40) + "px";
      div.style.top = Math.random() * (window.innerHeight - 40) + "px";
      div.innerHTML = `
        <svg viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg">
          <circle cx="32" cy="32" r="28" fill="#222" stroke="#fff" stroke-width="2"/>
          <circle cx="24" cy="26" r="3" fill="#fff"/>
          <circle cx="40" cy="26" r="3" fill="#fff"/>
          <path d="M24 42 C28 46, 36 46, 40 42" stroke="#fff" stroke-width="2" fill="none"/>
          <rect x="10" y="24" width="6" height="16" rx="3" fill="#ccc"/>
          <rect x="48" y="24" width="6" height="16" rx="3" fill="#ccc"/>
        </svg>
      `;
      audienceLayer.appendChild(div);
    }

    function reactToSegment(userId) {
      const avatar = document.getElementById("avatar-" + userId);
      if (!avatar) return;
      const r = Math.random();
      if (r < 0.5) {
        avatar.classList.add("jump");
        setTimeout(() => avatar.classList.remove("jump"), 400);
      } else if (r < 0.85) {
        avatar.classList.add("flash");
        setTimeout(() => avatar.classList.remove("flash"), 300);
      } else {
        moveAvatar(userId);
      }
    }

    function moveAvatar(userId) {
      const avatar = document.getElementById("avatar-" + userId);
      if (!avatar) return;
      const currentTop = parseFloat(avatar.style.top) || 0;
      const currentLeft = parseFloat(avatar.style.left) || 0;
      const maxMove = Math.min(window.innerWidth, window.innerHeight) * 0.10;
      const deltaX = (Math.random() - 0.5) * 2 * maxMove;
      const deltaY = (Math.random() - 0.5) * 2 * maxMove;
      let newLeft = currentLeft + deltaX;
      let newTop = currentTop + deltaY;
      newLeft = Math.max(0, Math.min(newLeft, window.innerWidth - 40));
      newTop = Math.max(0, Math.min(newTop, window.innerHeight - 40));
      avatar.style.left = `${newLeft}px`;
      avatar.style.top = `${newTop}px`;
    }

    const evtSource = new EventSource("http://192.168.88.252:5050/events");
    evtSource.onmessage = function(event) {
      const data = JSON.parse(event.data);
      if (data.type === "userlist") {
        data.ids.forEach(drawAvatar);
      } else {
        drawAvatar(data.id);
        reactToSegment(data.id);
      }
    };

startImage.addEventListener("click", () => {
  const image = document.getElementById("startImage");

  if (!playing) {
    // ⏳ Entramos en modo sincronización
    const syncSource = new EventSource("http://192.168.88.252:5050/wait-for-sync");
    syncSource.onmessage = (event) => {
      const data = JSON.parse(event.data);
      if (data.type === 'startPlay') {
        const delay = data.startAt - (Date.now() + timeOffset);
        console.log("🔁 Sincronizando, reproduciendo en", delay, "ms");

        setupHLS(delay); // nuevo uso con delay
        playing = true;

        // Reducir imagen
        image.classList.add("shrink");

        syncSource.close(); // ya no necesitamos más eventos
      }
    };
  } else {
    // 🔇 Pausar
    audio.pause();
    playing = false;

    // Restaurar imagen
    image.classList.remove("shrink");
  }
});

let timeOffset = 0;

function syncClockWithServer() {
  const t0 = Date.now();
  fetch("http://192.168.88.252:5050/servertime")
    .then(res => res.json())
    .then(data => {
      const t1 = Date.now();
      const serverTime = data.serverTime;
      const rtt = t1 - t0;
      timeOffset = serverTime - (t0 + rtt / 2);
      console.log("🕒 Offset con el servidor:", timeOffset, "ms");
    });
}
syncClockWithServer();
  </script>
</body>
</html>
